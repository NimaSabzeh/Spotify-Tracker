//function handleRoute = is used for setting the page variable (used for changing the content of the page, depending on if the user presses a item which should toggle between the pages)
// and also it's also set up for keeping track of the genre, track, or artist that the user selects in the main page (uses those variables to autofill the form)
function handleRoute(page, path = '') {
    window.location = `index.html?page=${page}${path}`
}


//window.onload function = verifies and gets the page variable (set by the handleRoute function), and uses switch/case to call the functions that change the html's content (different functions for different pages)
window.onload = function () {
    const urlParams = new URLSearchParams(window.location.search);
    const page = urlParams.get('page');
    switch (page) {
        case "main":
            mainPage()
        case "track":
            break;
        case "connection":
            break;
        case "collection":
            collectionPage(urlParams)
            break;
        default:
            mainPage()
    }
}


//function menuIcon(x) = is called when the user presses on the menu icon (which toggles a new class that changes the layout of the icon)
function menuIcon(x) {
    x.classList.toggle("changex");
}


//function menuOverlay(x) =
//checks if the menu icon is already pressed(meaning the menu should open), by checking if it contains the changex class.
// If Yes, it will change the opacity of the overlay menu to 100%, changes the z-index of the section to be on the top, and doesn't let the user scroll by turning of overflow.
// If No,  it will change the opacity of the overlay menu to 0%, changes the z-index of the section to be behind everything, and puts overflow on auto.
function menuOverlay(x) {
    if (x.classList.contains("changex")) {
        document.getElementById("menu").style.opacity = 1;
        document.getElementById("menu").style.zIndex = 99;
        document.getElementsByTagName('body')[0].style.overflow = 'hidden'
        document.getElementsByTagName("header")[0].style.zIndex = 'auto';
    } else {
        document.getElementById("menu").style.opacity = 0;
        document.getElementById("menu").style.zIndex = -1;
        document.getElementsByTagName('body')[0].style.overflow = 'auto'
        document.getElementsByTagName("header")[0].style.zIndex = 2;
    }
}


//function mainPage() = This function is called within the window.onload function if page = main or the default case is called.
//1: Changes the entire content within the article Tag, using the htmlContent Object (other content of the html file doesn't change, including the footer, nav, overlay menu and etc...)
//2: Uses the Splide JS library to import a new carousel with the attributes choosen for my type of slideshow (more instructions and info on https://splidejs.com/)
//3: Get the images for the carousel from the splide folder and stores them in an array.
//4: Using the ID of each Slide section, it replaces the img.src by the images inside the array.
//4.1: When any image is clicked, It checks if the image is at its active state; If yes it extracts the genre name from the image.src; changes the page layout to collection and auto selects the genre drop down by the choosen genre.
//5: Then it gets the Top10 tracks generated by the API (more info in spotify.js file), and sets the img, artist name, and track name of each item inside the Today's Top Hits section.
//5.1: Same as the carousel, when any of the items are clicked, the function will change the page layout to collection, and autofills the artist and track names inside the form.
function mainPage() {
    //1
    let mainArticle = document.getElementsByTagName("article")
    mainArticle[0].innerHTML = htmlContent.main
    //2
    setTimeout(() => {
        new Splide('.splide', {
            type: 'loop',
            focus: 'center',
            perPage: 5,
            autoScroll: {
                speed: 1,
            },
        }).mount(window.splide.Extensions);
    }, 100)
    //3
    var splideItems = ["splide/Country.jpg", "splide/Hip-Hop.jpg", "splide/Metal.jpg", "splide/Pop.jpg", "splide/Punk.jpg", "splide/R&B.jpg", "splide/Rock.jpg"]
    //4
    for (let i = 0; i < splideItems.length; i++) {
        let slideImage = splideItems[i]
        let slideItem = document.getElementById(`slide${i}`)
        let slideItemImg = slideItem.getElementsByTagName('img')
        //4.1
        slideItemImg[0].onclick = function () {
            if (slideItem.classList.contains("is-active")) {
                let genreName = slideImage.replace("splide/", "").replace(".jpg", "")
                handleRoute("collection", `&genre=${genreName}`)
            }
        }
        slideItemImg[0].src = slideImage
    }
    //5
    getTop10().then(data => {
        for (let i = 0; i < data.length; i++) {
            let top10Img = data[i][0]
            let top10Name = data[i][1]
            let top10Artist = data[i][2]
            let top10Item = document.getElementById(`top10Item${i}`)
            let top10ItemImg = top10Item.getElementsByTagName('img')[0]
            let top10ItemH = top10Item.getElementsByTagName('h3')[0]
            let top10ItemP = top10Item.getElementsByTagName('p')[0]
            top10ItemImg.src = top10Img
            top10ItemH.innerHTML = top10Name
            top10ItemP.innerHTML = top10Artist
            //5.1
            top10ItemImg.onclick = function () {
                let songName = top10Name
                let artistName = top10Artist
                handleRoute("collection", `&name=${songName}&artist=${artistName}`)
            }
        }
    })
}


//function collectionPage() = This function is called within the window.onload function if page = collection.
//1: Changes the entire content within the article Tag, using the htmlContent Object (other content of the html file doesn't change, including the footer, nav, overlay menu and etc...)
//2: Calls the addTrack() function (so that when the user reloads the page, the tracks stored in localStorage show up).
//3: If the user has clicked on one of the items from the slideshow or top 10 list located in the main page, the default value of the form changes accordingly.
//4: When thw user clicks on the "Go" button, the function will save the values entered by the user (form elements).
//5: By the use of a new function called searchTrack(), the function can use the Spotify API to serach for the top 50 tracks nased on the user's input.
//6: After the track objects are returned, the function will call showTrack(), which will show the returned tracks on the page.
function collectionPage(urlParams = '') {
    //1
    let mainArticle = document.getElementsByTagName("article")
    mainArticle[0].innerHTML = htmlContent.collection
    //2
    addTrack()
    //3
    const genre = urlParams.get('genre') || '';
    const artist = urlParams.get('artist') || '';
    const name = urlParams.get('name') || '';
    let formArtist = document.getElementById("artistName")
    let formName = document.getElementById("trackName")
    let formGenre = document.getElementById("genre")
    if (artist && name != ''){
        formArtist.setAttribute("Value",artist)
        formName.setAttribute("Value",name)
    }
    if (genre != ''){
        let genreOptions = formGenre.children
        for (let i =0; i< genreOptions.length; i++){
            if (genreOptions[i].value.toLowerCase() == genre.toLowerCase()){
                genreOptions[i].setAttribute("selected", true)
            }
        }
    }
    //4
    let entireForm = document.getElementById("track-form")
    entireForm.addEventListener('submit', function (event) {
        event.preventDefault();
        searchTrack(
            entireForm.elements.artistName.value,
            entireForm.elements.trackName.value,
            entireForm.elements.genre.value
        )
    })
    //5
    async function searchTrack(artist, name, genre) {
        let tracks = await getTracks(artist, name, genre)
        //6
        showTrack(tracks)
    }
}


//function msTominutes() = Is simply used for converting the duration of each track object from "ms" to minutes and seconds.
function msTominutes(ms){
    var d = new Date(1000*Math.round(ms/1000));
    function pad(i) { return ('0'+i).slice(-2); }
    var str = pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds());
    return str
}


//function showTrack() = is called within the collectionPage() function, and it will use the track objects (given as parameter), to showcase each track on the screen.
//1: First the function will empty the innerHtml of search items (to remove previous search items), and also checks if the given track list is empty or not.
//1.1: If it is, the function will write "No Items Available".
//1.2: If not, it will create a new li element, add each track's duration, image, name, artist and album.
//2: Finally the function will also add a button for each element, which will add the corresponding track to localStorage using the addTrackLocal() function; when its pressed.
function showTrack(tracks) {
    //1
    let searchItems = document.getElementById("search-items")
    searchItems.innerHTML = ``
    if (tracks.tracks.items.length == 0) {
        //1.1
        searchItems.innerHTML = `<h3 class="serach-failed">No Items Available</h3>`
    }
    //1.2
    else{
        for(let i = 0;i<tracks.tracks.items.length; i++){
        let searchTrack = document.createElement('li')
        searchTrack.classList.toggle("search-item-li")
        let trackDurationShow = msTominutes(tracks.tracks.items[i].duration_ms)
        searchTrack.innerHTML= `
        <img class="search-item-img" src= "${tracks.tracks.items[i].album.images[0].url}">
        <div>
        <h3 class="search-item-name">${tracks.tracks.items[i].name}</h3>
        <h3 class="search-item-artist">${tracks.tracks.items[i].artists[0].name}</h3>
        <p class="search-item-album">${tracks.tracks.items[i].album.name}</p>
        <p class="search-item-duration">${trackDurationShow}</p>
        </div>`
        searchItems.appendChild(searchTrack)
        let addButton = document.createElement('button');
        let icon1 = document.createElement("div")
        let icon2 = document.createElement("div")
        addButton.classList.toggle("add-track-button")
        icon1.classList.toggle("add-button-icon1")
        icon2.classList.toggle("add-button-icon2")
        addButton.appendChild(icon1)
        addButton.appendChild(icon2)
        searchTrack.appendChild(addButton)
        searchItems.appendChild(searchTrack)
        //2
        addButton.addEventListener('click', function(event){
            addTrackLocal(tracks.tracks.items[i])
        })
    }
}
}


//function addTrackLocal() = is called within the showTrack() function when any track button is pressed, and it will use the track object (given as parameter), to add the track to localStorage.
//1: The function will first get the "collection" item from localStorage:
//1.1: If it null, it will add the new track to it.
//1.2: If the track already exists, it will use alert to tell the user that "The Track Already Exists"
//1.3: Else, it will add the track to the array.
//2: Finally, it will call the addTrack() function, to showcase the added tracks inside localStorage on screen.
function addTrackLocal(track) {
    //1
    let localCollection = JSON.parse(localStorage.getItem('collection'));
    //1.1
    if (localCollection == null) {
        localCollection = [track]
      } else {
        //1.2
        if (localCollection.find(element => element.id === track.id)){
          alert('Track already exists')
        } else {
            //1.3
            localCollection.push(track)
        }
      }
    //2
    localStorage.setItem('collection', JSON.stringify(localCollection))
    console.log(localCollection)
    let collection = document.getElementById("track-collection")
    collection.innerHTML =''
    addTrack()
}


//function addTrack() = Is called within the addTrackLocal() function, and it will go through all elements (tracks) inside localStorage and showcase them on screen.
//1: First the function will go through the array of tracks (inside localStorage), and created a li element for each one.
//1.1: Then it will set an Id attribute for each one. (which will be used to remove items from the screen and localStorage)
//1.2: Then it will create different types of elements storing each track's duration, image, name, artist and album. (but the duration and album name are not visible = Opacity 0)
//2: Finally the function will create a new button for each li element, which will be used for removing the li itself and the corresponding track from localStorage.
function addTrack(){
    let localCollection = JSON.parse(localStorage.getItem('collection')) || [];
    //1
    for (i =0; i< localCollection.length;i++){
        let collection = document.getElementById("track-collection")
        let collectionTrack = document.createElement('li')
        //1.1
        collectionTrack.setAttribute("id", localCollection[i].id)
        collectionTrack.classList.toggle("collection-item")
        let trackDuration = msTominutes(localCollection[i].duration_ms)
        //1.2
        collectionTrack.innerHTML= `
        <span class="aditional-info">
        <p>Album:<br>${localCollection[i].album.name}</p>
        <p>Duration:<br>${trackDuration}</p>
        </span>
        <img id="collection-item-img${i}"class="collection-item-img" src= "${localCollection[i].album.images[0].url}">
        <div>
        <h3 class="collection-item-name">${localCollection[i].name}</h3>
        <h3 class="collection-item-artist">${localCollection[i].artists[0].name}</h3>
        </div>`
        //2
        let delButton = document.createElement('button');
        delButton.classList.toggle("delete-track-button")
        let icon1Del = document.createElement("div")
        icon1Del.classList.toggle("del-button-icon")
        delButton.appendChild(icon1Del)
        collectionTrack.appendChild(delButton)
        collection.appendChild(collectionTrack)
        delButton.addEventListener('click', function(event){
            const index = localCollection.findIndex((obj) => obj.id === collectionTrack.getAttribute('id'));
            localCollection.splice(index, 1);
            collectionTrack.remove();
            localStorage.setItem('collection', JSON.stringify(localCollection))
        })
    }
}


// htmlContent: Stores all the html (inside the article tag) for each page layout, and depending on which one is called, it changes the innerhtml of the article tag.
//Note: It only changes the article tag because all the other elements inside index.html are the same for every page.
//Note: because reading comments inside string is a bit hard, I'll write all the comments outside the html content.
const htmlContent = {
    //main: Is the 3 sections contained within the article tag when the main page is called.
    //SECTION 1:
    //1: Using the Splide JS library (more info on https://splidejs.com/), I created a carousel, and added seven section which will get their img.src from the mainPage() function.
    //SECTION 2:
    //1: This section only has 2 containers which each have <p> <img>, and this content is not modified using any java script, because they will never change.
    //SECTION 3:
    //1: This is the section where I showcase the top10 tracks of Today's top hits playlist on Spotify; each section has <img> <h3> <p>; the data is changed using DOM inside the mainPage() function.
    main: `
    <section id="section-1-main">
    <section class="splide" aria-label="Splide Basic HTML Example">
        <div class="splide__track">
              <ul class="splide__list">
                  <li id="slide0" class="splide__slide" ><img src="" alt=""></li>
                  <li id="slide1" class="splide__slide"><img src="" alt=""></li>
                  <li id="slide2" class="splide__slide"><img src="" alt=""></li>
                  <li id="slide3" class="splide__slide"><img src="" alt=""></li>
                  <li id="slide4" class="splide__slide"><img src="" alt=""></li>
                  <li id="slide5" class="splide__slide"><img src="" alt=""></li>
                  <li id="slide6" class="splide__slide"><img src="" alt=""></li>
              </ul>
        </div>
      </section>
</section>
<section id="section-2-main">
    <div>
        <h1 style="margin: 0px 0px 70px 0px; text-align:center">News</h1>
        <div class="news-section d-flex">
            <p>
            <strong> Ed Sheeran get engulfed by waves in music video for new single, "Boat"</strong><br><br>
            Ed Sheeran has released a new single, "Boat", taken off his upcoming album, "-" ("Subtract").
            The new track , out today (April 21) ; comes alongside an accompanying music video that sees the singer submerged in the sea with waves engulfing him. "Boat" serves as the opening track to "-", which is due out on May 5 via Asylum/Atlantic.
            </p>
            <img class="menu-img" src="images/News-1.jpg" alt="Iran's geographical location" />
        </div>
        <div class="news-section d-flex">
            <img class="menu-img" src="images/News-2.jpg" alt="Iran's geographical location" />
            <p style="margin-right: 0px !important; margin-left: 65px">
            <strong>Skeleten announces debut album, "Under Utopia" </strong><br> <br>
            Skeleten , real name Russell Fitzgibbon ; announced the record today (April 21) via multiple social media platforms, writing: “Without getting too serious… 
            I had this vision of waking into the world from eternal nothingness and floating over humanity, seeing everything with universal wonder and love, breathing in all the beauty and sadness of life for the first time.”
            </p>
        </div>
    </div>
</section>
<section id="section-3-main">
    <h1>Today's Top Hits</h1>
    <div id="top10Item0" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item1" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item2" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item3" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item4" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item5" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item6" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item7" class="top10Item">
        <img class="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item8" class="top10Item">
        <img id="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
    <div id="top10Item9" class="top10Item">
        <img id="top10Img" src= "">
        <h3 class="top10H"></h3>
        <p class="top10P"></p>
    </div>
</section>`,
    //collection: Is the 3 sections contained within the article tag when the collection page is called.
    //SECTION 1:
    //1: Contains the 3 form elements (artist, name, and genre), which are used by the collectionPage() function to show,add, and remove track items from the screen.
    //SECTION 2:
    //1: This section is used for showcasing the search results based on user input, using a ul element.(also an h2 element for the heading)
    //SECTION 3:
    //1: This section is used for showcasing the added elements in localStorage based on user input, using a ul element. (also an h2 element for the heading)
    collection: `
    <section id="section-1-collection">
    <h2>Add</h2>
    <form id="track-form">
        <div class="form-row">
          <label class="form-lable" for="artistName">Artist</label>
          <input class="form-input" type="text" name="artistName" id="artistName"/>
        </div>
        <div class="form-row">
            <label class="form-lable" for="trackName">Song</label>
            <input class="form-input" type="text" name="trackName" id="trackName"/>
          </div>
        <div class="form-row">
          <label class="form-lable" for="genre">Genre</label>
          <select class="form-input" name="genre" id="genre">
            <option value="">Select A Genre</option>
            <option value="ambient">Ambient</option>
            <option value="black-Metal">Black-Metal</option>
            <option value="blues">Blues</option>
            <option value="breakbeat">BreakBeat</option>
            <option value="chill">Chill</option>
            <option value="classical">Classical</option>
            <option value="country">Country</option>
            <option value="death-metal">Death-Metal</option>
            <option value="groove">Groove</option>
            <option value="hip-hop">Hip-Hop</option>
            <option value="jazz">Jazz</option>
            <option value="mandopop">MandoPop</option>
            <option value="metal">Metal</option>
            <option value="opera">Opera</option>
            <option value="pop">Pop</option>
            <option value="punk">Punk</option>
            <option value="rock">Rock</option>
            <option value="r-n-b">R&B</option>
            <option value="tango">Tango</option>
          </select>
        </div>
        <div id="form-button" class="form-row">
            <input type="submit" value="Go"/>
        </div>
</section>
<section id="section-2-collection">
    <h2>Search Results</h2>
    <ul id="search-items"></ul>
</section>
<section id="section-3-collection">
    <h2>Collection</h2>
    <ul id="track-collection"></ul>
</section>`,
}